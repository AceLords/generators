<?php

namespace DummyNamespace;

use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;

class DummyClass extends Notification implements ShouldQueue
{
    use Queueable;

    public $tries = 3;
    public $timeout = 120;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        // return $notifiable->prefers_sms ? ['nexmo'] : ['mail', 'database'];
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable)
    {
        $message = new MailMessage;
        $email = session()->get('site_no_reply_email') ?? session()->get('site_support_email');
        $subject = "Hello";
        $markdown = "view.name";

        $message
            ->from($email ?? session()->get('site_email'), session()->get('site_name'))
            ->subject($subject)
            ->markdown($markdown, [
                'actionText' => 'name',
                'actionUrl' => route('name'),
            ]);
        
        return $message;

    }

    /**
     * Get the array representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function toArray($notifiable)
    {
        return [
            'title' => $this->user->name . ' just performed an action!',
            'message' => 'Email: ' . $this->user->email,
            'link' => '#',
            'icon' => 'alert_outline',
            'alert' => 'info',
            'ip_address' => request()->ip(),
        ];
    }
}
